import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Alert,
  TextInput,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  Image
} from 'react-native';
import { StatusBar } from 'expo-status-bar';

// –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ª–æ–≥–∏–Ω–æ–º –¥–ª—è Android
export default function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [currentScreen, setCurrentScreen] = useState('chats'); // chats, calendar, ai, profile, tasks, timecapsule

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
  const [chats, setChats] = useState([
    { id: 1, name: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è –ò–≤–∞–Ω–æ–≤', lastMessage: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞?', messages: [] },
    { id: 2, name: 'üëµ –ë–∞–±—É—à–∫–∞ –∏ –¥–µ–¥—É—à–∫–∞', lastMessage: '–ü—Ä–∏–µ–∑–∂–∞–π—Ç–µ –≤ –≥–æ—Å—Ç–∏!', messages: [] },
    { id: 3, name: 'üë∂ –î–µ—Ç—Å–∫–∏–π —á–∞—Ç', lastMessage: '–ú–∞–º–∞, –∫–æ–≥–¥–∞ –æ–±–µ–¥?', messages: [] },
  ]);

  const [selectedChatId, setSelectedChatId] = useState(null);
  const [newMessage, setNewMessage] = useState('');
  const [aiMessages, setAiMessages] = useState([
    { id: 1, text: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Å–µ–º–µ–π–Ω—ã–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–µ–º–µ–π–Ω—ã—Ö –¥–µ–ª–∞—Ö!', isBot: true }
  ]);
  const [aiInput, setAiInput] = useState('');

  const [tasks, setTasks] = useState([
    { id: 1, title: '–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã', completed: false, assignee: '–ú–∞–º–∞', dueDate: '2024-01-15' },
    { id: 2, title: '–ó–∞–±—Ä–∞—Ç—å –¥–µ—Ç–µ–π –∏–∑ —à–∫–æ–ª—ã', completed: true, assignee: '–ü–∞–ø–∞', dueDate: '2024-01-14' },
    { id: 3, title: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —É–∂–∏–Ω', completed: false, assignee: '–ë–∞–±—É—à–∫–∞', dueDate: '2024-01-15' },
  ]);

  const [timeCapsules, setTimeCapsules] = useState([
    { id: 1, title: '–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ù–æ–≤—ã–º –ì–æ–¥–æ–º', message: '–° –ù–æ–≤—ã–º –ì–æ–¥–æ–º, –¥–æ—Ä–æ–≥–∞—è —Å–µ–º—å—è!', deliveryDate: '2025-01-01', created: '2024-01-10', recipient: '–í—Å–µ–π —Å–µ–º—å–µ' },
    { id: 2, title: '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–º—ã', message: '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –º–∞–º—É!', deliveryDate: '2024-03-15', created: '2024-01-10', recipient: '–ú–∞–º–µ' },
    { id: 3, title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–±–µ', message: '–ü–æ–º–Ω–∏ –æ —Å–≤–æ–∏—Ö —Ü–µ–ª—è—Ö –∏ –º–µ—á—Ç–∞—Ö!', deliveryDate: '2024-12-31', created: '2024-01-10', recipient: '–°–µ–±–µ –≤ –±—É–¥—É—â–µ–º' },
  ]);

  const [events, setEvents] = useState([
    { id: 1, title: '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–º—ã', date: '2024-01-15', time: '18:00' },
    { id: 2, title: '–°–µ–º–µ–π–Ω—ã–π —É–∂–∏–Ω', date: '2024-01-20', time: '19:00' },
    { id: 3, title: '–ü–æ—Ö–æ–¥ –≤ —Ç–µ–∞—Ç—Ä', date: '2024-01-25', time: '15:00' },
  ]);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const [showTaskForm, setShowTaskForm] = useState(false);
  const [showEventForm, setShowEventForm] = useState(false);
  const [showCapsuleForm, setShowCapsuleForm] = useState(false);
  const [showChatForm, setShowChatForm] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º
  const [newTaskTitle, setNewTaskTitle] = useState('');
  const [newTaskAssignee, setNewTaskAssignee] = useState('');
  const [newTaskDate, setNewTaskDate] = useState('');

  const [newEventTitle, setNewEventTitle] = useState('');
  const [newEventDate, setNewEventDate] = useState('');
  const [newEventTime, setNewEventTime] = useState('');

  const [newCapsuleTitle, setNewCapsuleTitle] = useState('');
  const [newCapsuleMessage, setNewCapsuleMessage] = useState('');
  const [newCapsuleDate, setNewCapsuleDate] = useState('');
  const [newCapsuleRecipient, setNewCapsuleRecipient] = useState('');

  const [newChatName, setNewChatName] = useState('');
  const [newChatType, setNewChatType] = useState('');
  const [selectedMembers, setSelectedMembers] = useState([]);

  // –°–ø–∏—Å–æ–∫ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞—Ç–∞
  const familyMembers = [
    '–í—Å–µ–π —Å–µ–º—å–µ',
    '–ú–∞–º–µ',
    '–ü–∞–ø–µ',
    '–ë–∞–±—É—à–∫–µ',
    '–î–µ–¥—É—à–∫–µ',
    '–°—ã–Ω—É',
    '–î–æ—á–µ—Ä–∏',
    '–ë—Ä–∞—Ç—É',
    '–°–µ—Å—Ç—Ä–µ',
    '–°–µ–±–µ –≤ –±—É–¥—É—â–µ–º'
  ];

  // –¢–∏–ø—ã —á–∞—Ç–æ–≤
  const chatTypes = [
    { id: 'family', name: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω—ã–π —á–∞—Ç', icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶' },
    { id: 'parents', name: 'üë´ –†–æ–¥–∏—Ç–µ–ª–∏', icon: 'üë´' },
    { id: 'children', name: 'üë∂ –î–µ—Ç—Å–∫–∏–π —á–∞—Ç', icon: 'üë∂' },
    { id: 'grandparents', name: 'üë¥üëµ –ë–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏', icon: 'üë¥üëµ' },
    { id: 'siblings', name: 'üë´ –ë—Ä–∞—Ç—å—è –∏ —Å–µ—Å—Ç—Ä—ã', icon: 'üë´' },
    { id: 'custom', name: 'üí¨ –û—Å–æ–±—ã–π —á–∞—Ç', icon: 'üí¨' }
  ];

  // –ß–ª–µ–Ω—ã —Å–µ–º—å–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
  const chatMembers = [
    '–ú–∞–º–∞',
    '–ü–∞–ø–∞',
    '–ë–∞–±—É—à–∫–∞',
    '–î–µ–¥—É—à–∫–∞',
    '–°—ã–Ω',
    '–î–æ—á—å',
    '–ë—Ä–∞—Ç',
    '–°–µ—Å—Ç—Ä–∞',
    '–¢–µ—Ç—è',
    '–î—è–¥—è'
  ];

  const handleLogin = () => {
    try {
      if (!email.trim() || !password.trim()) {
        Alert.alert('–û—à–∏–±–∫–∞', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
      }

      // –ú–æ–∫–æ–≤—ã–π –ª–æ–≥–∏–Ω - –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç
      setIsLoggedIn(true);
      Alert.alert('–£—Å–ø–µ—Ö!', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Aulet Family Chat!');
    } catch (error) {
      console.error('Error in handleLogin:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ');
    }
  };

  const handleLogout = () => {
    Alert.alert(
      '–í—ã—Ö–æ–¥',
      '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        {
          text: '–í—ã–π—Ç–∏',
          onPress: () => {
            setIsLoggedIn(false);
            setEmail('');
            setPassword('');
            setCurrentScreen('chats');
            setSelectedChatId(null);
            setNewMessage('');
            setAiInput('');
          }
        },
      ]
    );
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á–∞—Ç–æ–≤
  const sendMessage = () => {
    if (!newMessage.trim() || !selectedChatId) return;

    const updatedChats = chats.map(chat => {
      if (chat.id === selectedChatId) {
        const newMsg = {
          id: Date.now(),
          text: newMessage,
          sender: '–í—ã',
          timestamp: new Date().toLocaleTimeString(),
        };
        return {
          ...chat,
          messages: [...chat.messages, newMsg],
          lastMessage: newMessage,
        };
      }
      return chat;
    });

    setChats(updatedChats);
    setNewMessage('');
    Alert.alert('–£—Å–ø–µ—Ö!', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  };

  const createChat = () => {
    setShowChatForm(true);
    setNewChatName('');
    setNewChatType('family');
    setSelectedMembers([]);
  };

  const toggleMember = (member) => {
    if (selectedMembers.includes(member)) {
      setSelectedMembers(selectedMembers.filter(m => m !== member));
    } else {
      setSelectedMembers([...selectedMembers, member]);
    }
  };

  const saveChat = () => {
    if (!newChatName.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞');
      return;
    }

    if (selectedMembers.length === 0) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
      return;
    }

    const selectedChatType = chatTypes.find(type => type.id === newChatType);
    const chatIcon = selectedChatType ? selectedChatType.icon : 'üí¨';

    const newChat = {
      id: Date.now(),
      name: `${chatIcon} ${newChatName}`,
      lastMessage: '–ß–∞—Ç —Å–æ–∑–¥–∞–Ω!',
      messages: [{
        id: Date.now(),
        text: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç "${newChatName}"! –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${selectedMembers.join(', ')}`,
        sender: '–°–∏—Å—Ç–µ–º–∞',
        timestamp: new Date().toLocaleTimeString(),
      }],
      members: selectedMembers,
      type: newChatType,
      created: new Date().toISOString(),
    };

    setChats([...chats, newChat]);
    setShowChatForm(false);
    Alert.alert('–£—Å–ø–µ—Ö!', `–ß–∞—Ç "${newChatName}" —Å–æ–∑–¥–∞–Ω!`);
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ò–ò
  const sendAiMessage = () => {
    if (!aiInput.trim()) return;

    const userMessage = {
      id: Date.now(),
      text: aiInput,
      isBot: false,
    };

    const botResponses = [
      '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ.',
      '–Ø –¥—É–º–∞—é, —á—Ç–æ –ª—É—á—à–∏–π –ø–æ–¥—Ö–æ–¥ –∑–¥–µ—Å—å - –æ–±—Å—É–¥–∏—Ç—å —ç—Ç–æ —Å —Å–µ–º—å–µ–π.',
      '–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å–µ–º–µ–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è. –í–æ—Ç –º–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...',
      '–°–µ–º–µ–π–Ω—ã–µ –¥–µ–ª–∞ —Ç—Ä–µ–±—É—é—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è. –ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–ª–µ–¥—É—é—â–µ–µ...',
      '–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–∫—Ä–µ–ø–∏—Ç—å —Å–µ–º–µ–π–Ω—ã–µ —Å–≤—è–∑–∏.',
    ];

    const botMessage = {
      id: Date.now() + 1,
      text: botResponses[Math.floor(Math.random() * botResponses.length)],
      isBot: true,
    };

    setAiMessages([...aiMessages, userMessage, botMessage]);
    setAiInput('');
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á
  const toggleTask = (taskId) => {
    const updatedTasks = tasks.map(task =>
      task.id === taskId ? { ...task, completed: !task.completed } : task
    );
    setTasks(updatedTasks);
  };

  const addTask = () => {
    setShowTaskForm(true);
    setNewTaskTitle('');
    setNewTaskAssignee('');
    setNewTaskDate(new Date().toISOString().split('T')[0]);
  };

  const saveTask = () => {
    if (!newTaskTitle.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏');
      return;
    }

    const newTask = {
      id: Date.now(),
      title: newTaskTitle,
      completed: false,
      assignee: newTaskAssignee || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω',
      dueDate: newTaskDate || new Date().toISOString().split('T')[0],
    };

    setTasks([...tasks, newTask]);
    setShowTaskForm(false);
    Alert.alert('–£—Å–ø–µ—Ö!', '–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–ø—Å—É–ª –≤—Ä–µ–º–µ–Ω–∏
  const createTimeCapsule = () => {
    setShowCapsuleForm(true);
    setNewCapsuleTitle('');
    setNewCapsuleMessage('');
    setNewCapsuleDate('2025-01-01');
    setNewCapsuleRecipient('–í—Å–µ–π —Å–µ–º—å–µ');
  };

  const saveCapsule = () => {
    if (!newCapsuleTitle.trim() || !newCapsuleMessage.trim() || !newCapsuleRecipient) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å–∞—Ç–∞');
      return;
    }

    const newCapsule = {
      id: Date.now(),
      title: newCapsuleTitle,
      message: newCapsuleMessage,
      deliveryDate: newCapsuleDate || '2025-01-01',
      created: new Date().toISOString().split('T')[0],
      recipient: newCapsuleRecipient,
    };

    setTimeCapsules([...timeCapsules, newCapsule]);
    setShowCapsuleForm(false);
    Alert.alert('–£—Å–ø–µ—Ö!', `–ö–∞–ø—Å—É–ª–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è "${newCapsuleRecipient}" —Å–æ–∑–¥–∞–Ω–∞!`);
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
  const addEvent = () => {
    setShowEventForm(true);
    setNewEventTitle('');
    setNewEventDate(new Date().toISOString().split('T')[0]);
    setNewEventTime('12:00');
  };

  const saveEvent = () => {
    if (!newEventTitle.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è');
      return;
    }

    const newEvent = {
      id: Date.now(),
      title: newEventTitle,
      date: newEventDate || new Date().toISOString().split('T')[0],
      time: newEventTime || '12:00',
    };

    setEvents([...events, newEvent]);
    setShowEventForm(false);
    Alert.alert('–£—Å–ø–µ—Ö!', '–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º
  const renderModal = () => {
    if (showChatForm) {
      return (
        <View style={styles.modalOverlay}>
          <ScrollView contentContainerStyle={styles.modalScrollContent}>
            <View style={styles.modalContent}>
              <Text style={styles.modalTitle}>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç</Text>

              <TextInput
                style={styles.modalInput}
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞"
                value={newChatName}
                onChangeText={setNewChatName}
              />

              <Text style={styles.modalLabel}>–¢–∏–ø —á–∞—Ç–∞:</Text>
              <ScrollView horizontal style={styles.chatTypeSelector} showsHorizontalScrollIndicator={false}>
                {chatTypes.map((type) => (
                  <TouchableOpacity
                    key={type.id}
                    style={[
                      styles.chatTypeButton,
                      newChatType === type.id && styles.selectedChatType
                    ]}
                    onPress={() => setNewChatType(type.id)}
                  >
                    <Text style={styles.chatTypeIcon}>{type.icon}</Text>
                    <Text style={[
                      styles.chatTypeText,
                      newChatType === type.id && styles.selectedChatTypeText
                    ]}>
                      {type.name.split(' ').slice(1).join(' ')}
                    </Text>
                  </TouchableOpacity>
                ))}
              </ScrollView>

              <Text style={styles.modalLabel}>–£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞:</Text>
              <View style={styles.membersGrid}>
                {chatMembers.map((member) => (
                  <TouchableOpacity
                    key={member}
                    style={[
                      styles.memberButton,
                      selectedMembers.includes(member) && styles.selectedMember
                    ]}
                    onPress={() => toggleMember(member)}
                  >
                    <Text style={[
                      styles.memberText,
                      selectedMembers.includes(member) && styles.selectedMemberText
                    ]}>
                      {selectedMembers.includes(member) ? '‚úÖ' : 'üë§'} {member}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>

              <View style={styles.modalButtons}>
                <TouchableOpacity
                  style={styles.modalCancelButton}
                  onPress={() => setShowChatForm(false)}
                >
                  <Text style={styles.modalCancelText}>–û—Ç–º–µ–Ω–∞</Text>
                </TouchableOpacity>

                <TouchableOpacity style={styles.modalSaveButton} onPress={saveChat}>
                  <Text style={styles.modalSaveText}>–°–æ–∑–¥–∞—Ç—å</Text>
                </TouchableOpacity>
              </View>
            </View>
          </ScrollView>
        </View>
      );
    }

    if (showTaskForm) {
      return (
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞</Text>

            <TextInput
              style={styles.modalInput}
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
              value={newTaskTitle}
              onChangeText={setNewTaskTitle}
            />

            <TextInput
              style={styles.modalInput}
              placeholder="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
              value={newTaskAssignee}
              onChangeText={setNewTaskAssignee}
            />

            <TextInput
              style={styles.modalInput}
              placeholder="–î–∞—Ç–∞ (YYYY-MM-DD)"
              value={newTaskDate}
              onChangeText={setNewTaskDate}
            />

            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={styles.modalCancelButton}
                onPress={() => setShowTaskForm(false)}
              >
                <Text style={styles.modalCancelText}>–û—Ç–º–µ–Ω–∞</Text>
              </TouchableOpacity>

              <TouchableOpacity style={styles.modalSaveButton} onPress={saveTask}>
                <Text style={styles.modalSaveText}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      );
    }

    if (showEventForm) {
      return (
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ</Text>

            <TextInput
              style={styles.modalInput}
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"
              value={newEventTitle}
              onChangeText={setNewEventTitle}
            />

            <TextInput
              style={styles.modalInput}
              placeholder="–î–∞—Ç–∞ (YYYY-MM-DD)"
              value={newEventDate}
              onChangeText={setNewEventDate}
            />

            <TextInput
              style={styles.modalInput}
              placeholder="–í—Ä–µ–º—è (HH:MM)"
              value={newEventTime}
              onChangeText={setNewEventTime}
            />

            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={styles.modalCancelButton}
                onPress={() => setShowEventForm(false)}
              >
                <Text style={styles.modalCancelText}>–û—Ç–º–µ–Ω–∞</Text>
              </TouchableOpacity>

              <TouchableOpacity style={styles.modalSaveButton} onPress={saveEvent}>
                <Text style={styles.modalSaveText}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      );
    }

    if (showCapsuleForm) {
      return (
        <View style={styles.modalOverlay}>
          <ScrollView contentContainerStyle={styles.modalScrollContent}>
            <View style={styles.modalContent}>
              <Text style={styles.modalTitle}>–ù–æ–≤–∞—è –∫–∞–ø—Å—É–ª–∞ –≤—Ä–µ–º–µ–Ω–∏</Text>

              <TextInput
                style={styles.modalInput}
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–ø—Å—É–ª—ã"
                value={newCapsuleTitle}
                onChangeText={setNewCapsuleTitle}
              />

              <Text style={styles.modalLabel}>–ê–¥—Ä–µ—Å–∞—Ç:</Text>
              <ScrollView horizontal style={styles.recipientSelector} showsHorizontalScrollIndicator={false}>
                {familyMembers.map((member) => (
                  <TouchableOpacity
                    key={member}
                    style={[
                      styles.recipientButton,
                      newCapsuleRecipient === member && styles.selectedRecipient
                    ]}
                    onPress={() => setNewCapsuleRecipient(member)}
                  >
                    <Text style={[
                      styles.recipientText,
                      newCapsuleRecipient === member && styles.selectedRecipientText
                    ]}>
                      {member}
                    </Text>
                  </TouchableOpacity>
                ))}
              </ScrollView>

              <TextInput
                style={[styles.modalInput, styles.modalTextArea]}
                placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—É–¥—É—â–µ–≥–æ"
                value={newCapsuleMessage}
                onChangeText={setNewCapsuleMessage}
                multiline
              />

              <TextInput
                style={styles.modalInput}
                placeholder="–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (YYYY-MM-DD)"
                value={newCapsuleDate}
                onChangeText={setNewCapsuleDate}
              />

              <View style={styles.modalButtons}>
                <TouchableOpacity
                  style={styles.modalCancelButton}
                  onPress={() => setShowCapsuleForm(false)}
                >
                  <Text style={styles.modalCancelText}>–û—Ç–º–µ–Ω–∞</Text>
                </TouchableOpacity>

                <TouchableOpacity style={styles.modalSaveButton} onPress={saveCapsule}>
                  <Text style={styles.modalSaveText}>–°–æ–∑–¥–∞—Ç—å</Text>
                </TouchableOpacity>
              </View>
            </View>
          </ScrollView>
        </View>
      );
    }

    return null;
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const renderTabButton = (screenName: string, title: string, icon: string) => (
    <TouchableOpacity
      key={screenName}
      style={[
        styles.tabButton,
        currentScreen === screenName && styles.activeTabButton
      ]}
      onPress={() => {
        setCurrentScreen(screenName);
        setSelectedChatId(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ —ç–∫—Ä–∞–Ω–∞
      }}
    >
      <Text style={[
        styles.tabIcon,
        currentScreen === screenName && styles.activeTabIcon
      ]}>
        {icon}
      </Text>
      <Text style={[
        styles.tabText,
        currentScreen === screenName && styles.activeTabText
      ]}>
        {title}
      </Text>
    </TouchableOpacity>
  );

  const renderScreen = () => {
    switch (currentScreen) {
      case 'chats':
        if (selectedChatId) {
          const selectedChat = chats.find(chat => chat.id === selectedChatId);
          return (
            <View style={styles.screenContent}>
              <View style={styles.chatHeader}>
                <TouchableOpacity
                  style={styles.backButton}
                  onPress={() => setSelectedChatId(null)}
                >
                  <Text style={styles.backButtonText}>‚Üê –ù–∞–∑–∞–¥</Text>
                </TouchableOpacity>
                <Text style={styles.chatHeaderTitle}>{selectedChat?.name}</Text>
              </View>

              <ScrollView style={styles.messagesContainer}>
                {selectedChat?.messages.map(message => (
                  <View key={message.id} style={styles.messageItem}>
                    <Text style={styles.messageSender}>{message.sender}</Text>
                    <Text style={styles.messageText}>{message.text}</Text>
                    <Text style={styles.messageTime}>{message.timestamp}</Text>
                  </View>
                ))}
                {selectedChat?.messages.length === 0 && (
                  <Text style={styles.emptyMessages}>–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ!</Text>
                )}
              </ScrollView>

              <View style={styles.messageInput}>
                <TextInput
                  style={styles.messageTextInput}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                  value={newMessage}
                  onChangeText={setNewMessage}
                  multiline
                />
                <TouchableOpacity style={styles.sendButton} onPress={sendMessage}>
                  <Text style={styles.sendButtonText}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Text>
                </TouchableOpacity>
              </View>
            </View>
          );
        }

        return (
          <View style={styles.screenContent}>
            <Text style={styles.screenTitle}>üí¨ –°–µ–º–µ–π–Ω—ã–µ —á–∞—Ç—ã</Text>
            {chats.map(chat => (
              <TouchableOpacity
                key={chat.id}
                style={styles.chatItem}
                onPress={() => setSelectedChatId(chat.id)}
              >
                <Text style={styles.chatName}>{chat.name}</Text>
                <Text style={styles.chatMessage}>{chat.lastMessage}</Text>
              </TouchableOpacity>
            ))}
            <TouchableOpacity style={styles.actionButton} onPress={createChat}>
              <Text style={styles.actionButtonText}>+ –°–æ–∑–¥–∞—Ç—å —á–∞—Ç</Text>
            </TouchableOpacity>
          </View>
        );
      case 'calendar':
        return (
          <View style={styles.screenContent}>
            <Text style={styles.screenTitle}>üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π</Text>
            {events.map(event => (
              <View key={event.id} style={styles.eventItem}>
                <Text style={styles.eventDate}>{event.date}</Text>
                <Text style={styles.eventName}>{event.title}</Text>
                <Text style={styles.eventTime}>{event.time}</Text>
              </View>
            ))}
            <TouchableOpacity style={styles.actionButton} onPress={addEvent}>
              <Text style={styles.actionButtonText}>+ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ</Text>
            </TouchableOpacity>
          </View>
        );
      case 'ai':
        return (
          <View style={styles.screenContent}>
            <Text style={styles.screenTitle}>ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫</Text>
            <ScrollView style={styles.aiMessagesContainer}>
              {aiMessages.map(message => (
                <View key={message.id} style={[
                  styles.aiMessageItem,
                  message.isBot ? styles.botMessage : styles.userMessage
                ]}>
                  <Text style={styles.aiMessageText}>{message.text}</Text>
                </View>
              ))}
            </ScrollView>
            <View style={styles.aiInputContainer}>
              <TextInput
                style={styles.aiInput}
                placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å..."
                value={aiInput}
                onChangeText={setAiInput}
                multiline
              />
              <TouchableOpacity style={styles.actionButton} onPress={sendAiMessage}>
                <Text style={styles.actionButtonText}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Text>
              </TouchableOpacity>
            </View>
          </View>
        );
      case 'tasks':
        return (
          <View style={styles.screenContent}>
            <Text style={styles.screenTitle}>üìã –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á</Text>
            {tasks.map(task => (
              <TouchableOpacity
                key={task.id}
                style={styles.taskItem}
                onPress={() => toggleTask(task.id)}
              >
                <Text style={[styles.taskTitle, task.completed && styles.completedTask]}>
                  {task.completed ? '‚úÖ' : '‚è≥'} {task.title}
                </Text>
                <Text style={styles.taskAssignee}>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task.assignee}</Text>
                <Text style={styles.taskDate}>–°—Ä–æ–∫: {task.dueDate}</Text>
              </TouchableOpacity>
            ))}
            <TouchableOpacity style={styles.actionButton} onPress={addTask}>
              <Text style={styles.actionButtonText}>+ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</Text>
            </TouchableOpacity>
          </View>
        );
      case 'timecapsule':
        return (
          <View style={styles.screenContent}>
            <Text style={styles.screenTitle}>‚è∞ –ö–∞–ø—Å—É–ª—ã –≤—Ä–µ–º–µ–Ω–∏</Text>
            <ScrollView style={styles.capsulesContainer}>
              {timeCapsules.map(capsule => (
                <View key={capsule.id} style={styles.capsuleItem}>
                  <View style={styles.capsuleHeader}>
                    <Text style={styles.capsuleTitle}>{capsule.title}</Text>
                    <Text style={styles.capsuleRecipient}>–î–ª—è: {capsule.recipient}</Text>
                  </View>
                  <Text style={styles.capsuleMessage}>"{capsule.message}"</Text>
                  <View style={styles.capsuleFooter}>
                    <Text style={styles.capsuleDate}>üìÖ –î–æ—Å—Ç–∞–≤–∫–∞: {capsule.deliveryDate}</Text>
                    <Text style={styles.capsuleCreated}>üìù –°–æ–∑–¥–∞–Ω–æ: {capsule.created}</Text>
                  </View>
                </View>
              ))}
            </ScrollView>
            <TouchableOpacity style={styles.actionButton} onPress={createTimeCapsule}>
              <Text style={styles.actionButtonText}>+ –°–æ–∑–¥–∞—Ç—å –∫–∞–ø—Å—É–ª—É</Text>
            </TouchableOpacity>
          </View>
        );
      case 'profile':
        return (
          <View style={styles.screenContent}>
            <Text style={styles.screenTitle}>üë§ –ü—Ä–æ—Ñ–∏–ª—å</Text>
            <View style={styles.profileInfo}>
              <Text style={styles.profileName}>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</Text>
              <Text style={styles.profileEmail}>{email}</Text>
            </View>
            <TouchableOpacity style={styles.settingItem} onPress={() => Alert.alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–≠–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫')}>
              <Text style={styles.settingText}>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.settingItem} onPress={() => Alert.alert('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')}>
              <Text style={styles.settingText}>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
              <Text style={styles.logoutButtonText}>–í—ã–π—Ç–∏</Text>
            </TouchableOpacity>
          </View>
        );
      default:
        return null;
    }
  };

  // –≠–∫—Ä–∞–Ω –ª–æ–≥–∏–Ω–∞
  if (!isLoggedIn) {
    return (
      <KeyboardAvoidingView
        style={styles.container}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        <StatusBar style="auto" />
        <ScrollView contentContainerStyle={styles.loginContainer}>
          <Image
            source={require('./src/logo.jpg')}
            style={styles.logo}
            resizeMode="contain"
          />
          <Text style={styles.title}>Aulet Family Chat</Text>
          <Text style={styles.subtitle}>–°–µ–º–µ–π–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä</Text>

          <View style={styles.loginCard}>
            <Text style={styles.loginTitle}>–í—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</Text>

            <TextInput
              style={styles.input}
              placeholder="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"
              value={email}
              onChangeText={setEmail}
              keyboardType="email-address"
              autoCapitalize="none"
            />

            <TextInput
              style={styles.input}
              placeholder="–ü–∞—Ä–æ–ª—å"
              value={password}
              onChangeText={setPassword}
              secureTextEntry
            />

            <TouchableOpacity style={styles.loginButton} onPress={handleLogin}>
              <Text style={styles.loginButtonText}>–í–æ–π—Ç–∏</Text>
            </TouchableOpacity>

            <Text style={styles.hint}>
              –í–≤–µ–¥–∏—Ç–µ –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ (—ç—Ç–æ –¥–µ–º–æ –≤–µ—Ä—Å–∏—è)
            </Text>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    );
  }

  // –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
  return (
    <View style={styles.container}>
      <StatusBar style="auto" />

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º */}
      <View style={styles.header}>
        <Image
          source={require('./src/logo.jpg')}
          style={styles.headerLogo}
          resizeMode="contain"
        />
        <Text style={styles.headerTitle}>Aulet Family Chat</Text>
      </View>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <View style={styles.mainContent}>
        {renderScreen()}
      </View>

      {/* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <View style={styles.tabBarContainer}>
        <ScrollView horizontal style={styles.tabBar} showsHorizontalScrollIndicator={false}>
          {renderTabButton('chats', '–ß–∞—Ç—ã', 'üí¨')}
          {renderTabButton('calendar', '–°–æ–±—ã—Ç–∏—è', 'üìÖ')}
          {renderTabButton('tasks', '–ó–∞–¥–∞—á–∏', 'üìã')}
          {renderTabButton('timecapsule', '–ö–∞–ø—Å—É–ª—ã', '‚è∞')}
          {renderTabButton('ai', '–ò–ò', 'ü§ñ')}
          {renderTabButton('profile', '–ü—Ä–æ—Ñ–∏–ª—å', 'üë§')}
        </ScrollView>
      </View>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      {renderModal()}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFF8F0',
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è –ª–æ–≥–∏–Ω–∞
  loginContainer: {
    flexGrow: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  logo: {
    width: 120,
    height: 120,
    marginBottom: 20,
    borderRadius: 60,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#2D5016',
    marginBottom: 8,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#6B8E23',
    marginBottom: 40,
    textAlign: 'center',
  },
  loginCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 24,
    width: '100%',
    maxWidth: 350,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  loginTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#228B22',
    marginBottom: 20,
    textAlign: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: '#E8F5E8',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    marginBottom: 16,
    backgroundColor: '#F9FFF9',
  },
  loginButton: {
    backgroundColor: '#228B22',
    borderRadius: 12,
    paddingVertical: 14,
    alignItems: 'center',
    marginBottom: 16,
  },
  loginButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  hint: {
    fontSize: 12,
    color: '#6B8E23',
    textAlign: 'center',
    fontStyle: 'italic',
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 16,
    paddingHorizontal: 20,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E8F5E8',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  headerLogo: {
    width: 40,
    height: 40,
    marginRight: 12,
    borderRadius: 20,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#2D5016',
  },
  mainContent: {
    flex: 1,
  },
  screenContent: {
    flex: 1,
    padding: 20,
  },
  screenTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#2D5016',
    marginBottom: 20,
    textAlign: 'center',
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è —á–∞—Ç–æ–≤
  chatItem: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  chatName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2D5016',
    marginBottom: 4,
  },
  chatMessage: {
    fontSize: 14,
    color: '#6B8E23',
  },
  chatHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingBottom: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#E8F5E8',
    marginBottom: 16,
  },
  backButton: {
    marginRight: 16,
  },
  backButtonText: {
    fontSize: 16,
    color: '#228B22',
    fontWeight: 'bold',
  },
  chatHeaderTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2D5016',
  },
  messagesContainer: {
    flex: 1,
    marginBottom: 16,
  },
  messageItem: {
    backgroundColor: '#F0FFF0',
    borderRadius: 12,
    padding: 12,
    marginBottom: 8,
  },
  messageSender: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#228B22',
    marginBottom: 4,
  },
  messageText: {
    fontSize: 14,
    color: '#2D5016',
    marginBottom: 4,
  },
  messageTime: {
    fontSize: 10,
    color: '#6B8E23',
    textAlign: 'right',
  },
  emptyMessages: {
    textAlign: 'center',
    color: '#6B8E23',
    fontStyle: 'italic',
    marginTop: 50,
  },
  messageInput: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: '#E8F5E8',
  },
  messageTextInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#E8F5E8',
    borderRadius: 12,
    paddingHorizontal: 12,
    paddingVertical: 8,
    marginRight: 8,
    maxHeight: 100,
    backgroundColor: '#FFFFFF',
  },
  sendButton: {
    backgroundColor: '#228B22',
    borderRadius: 12,
    paddingVertical: 10,
    paddingHorizontal: 16,
  },
  sendButtonText: {
    color: '#FFFFFF',
    fontWeight: 'bold',
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
  eventItem: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  eventDate: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#228B22',
    marginBottom: 4,
  },
  eventName: {
    fontSize: 16,
    color: '#2D5016',
  },
  eventTime: {
    fontSize: 12,
    color: '#6B8E23',
    marginTop: 4,
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è –ò–ò
  aiMessagesContainer: {
    flex: 1,
    marginBottom: 16,
  },
  aiMessageItem: {
    borderRadius: 12,
    padding: 12,
    marginBottom: 8,
    maxWidth: '80%',
  },
  botMessage: {
    backgroundColor: '#F0FFF0',
    alignSelf: 'flex-start',
  },
  userMessage: {
    backgroundColor: '#E8F5E8',
    alignSelf: 'flex-end',
  },
  aiMessageText: {
    fontSize: 14,
    color: '#2D5016',
    lineHeight: 20,
  },
  aiInputContainer: {
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: '#E8F5E8',
  },
  aiInput: {
    borderWidth: 1,
    borderColor: '#E8F5E8',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    marginBottom: 16,
    backgroundColor: '#FFFFFF',
    minHeight: 80,
    textAlignVertical: 'top',
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
  profileInfo: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  profileName: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#2D5016',
    marginBottom: 4,
  },
  profileEmail: {
    fontSize: 14,
    color: '#6B8E23',
  },
  settingItem: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  settingText: {
    fontSize: 16,
    color: '#2D5016',
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–¥–∞—á
  taskItem: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  taskTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2D5016',
    marginBottom: 4,
  },
  completedTask: {
    textDecorationLine: 'line-through',
    color: '#6B8E23',
  },
  taskAssignee: {
    fontSize: 14,
    color: '#6B8E23',
    marginBottom: 2,
  },
  taskDate: {
    fontSize: 12,
    color: '#999',
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞–ø—Å—É–ª –≤—Ä–µ–º–µ–Ω–∏
  capsulesContainer: {
    flex: 1,
    marginBottom: 16,
  },
  capsuleItem: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
    borderLeftWidth: 4,
    borderLeftColor: '#228B22',
  },
  capsuleHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  capsuleTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2D5016',
    flex: 1,
  },
  capsuleRecipient: {
    fontSize: 12,
    color: '#228B22',
    fontWeight: 'bold',
    backgroundColor: '#F0FFF0',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 8,
  },
  capsuleMessage: {
    fontSize: 14,
    color: '#2D5016',
    marginBottom: 12,
    fontStyle: 'italic',
    lineHeight: 20,
  },
  capsuleFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  capsuleDate: {
    fontSize: 12,
    color: '#228B22',
    fontWeight: 'bold',
  },
  capsuleCreated: {
    fontSize: 10,
    color: '#999',
  },
  // –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
  actionButton: {
    backgroundColor: '#228B22',
    borderRadius: 12,
    paddingVertical: 12,
    paddingHorizontal: 20,
    alignItems: 'center',
    marginTop: 10,
  },
  actionButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  logoutButton: {
    backgroundColor: '#DC3545',
    borderRadius: 12,
    paddingVertical: 12,
    paddingHorizontal: 20,
    alignItems: 'center',
    marginTop: 20,
  },
  logoutButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  tabBarContainer: {
    backgroundColor: '#FFFFFF',
    borderTopWidth: 1,
    borderTopColor: '#E8F5E8',
  },
  tabBar: {
    paddingVertical: 8,
    paddingBottom: Platform.OS === 'ios' ? 24 : 8,
    paddingHorizontal: 8,
  },
  tabButton: {
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 16,
    marginHorizontal: 4,
    minWidth: 80,
  },
  activeTabButton: {
    backgroundColor: '#F0FFF0',
    borderRadius: 8,
    marginHorizontal: 4,
  },
  tabIcon: {
    fontSize: 20,
    marginBottom: 4,
  },
  activeTabIcon: {
    fontSize: 22,
  },
  tabText: {
    fontSize: 12,
    color: '#6B8E23',
  },
  activeTabText: {
    fontSize: 12,
    color: '#228B22',
    fontWeight: 'bold',
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  modalOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  },
  modalScrollContent: {
    flexGrow: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 20,
  },
  modalContent: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 24,
    width: '90%',
    maxWidth: 400,
    maxHeight: '80%',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#2D5016',
    marginBottom: 20,
    textAlign: 'center',
  },
  modalInput: {
    borderWidth: 1,
    borderColor: '#E8F5E8',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    marginBottom: 16,
    backgroundColor: '#F9FFF9',
  },
  modalTextArea: {
    minHeight: 80,
    textAlignVertical: 'top',
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 8,
  },
  modalCancelButton: {
    flex: 1,
    backgroundColor: '#F5F5F5',
    borderRadius: 12,
    paddingVertical: 12,
    marginRight: 8,
    alignItems: 'center',
  },
  modalCancelText: {
    color: '#666',
    fontSize: 16,
    fontWeight: 'bold',
  },
  modalSaveButton: {
    flex: 1,
    backgroundColor: '#228B22',
    borderRadius: 12,
    paddingVertical: 12,
    marginLeft: 8,
    alignItems: 'center',
  },
  modalSaveText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞—Ç–∞
  modalLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2D5016',
    marginBottom: 8,
  },
  recipientSelector: {
    marginBottom: 16,
  },
  recipientButton: {
    backgroundColor: '#F9FFF9',
    borderWidth: 1,
    borderColor: '#E8F5E8',
    borderRadius: 20,
    paddingHorizontal: 16,
    paddingVertical: 8,
    marginRight: 8,
    marginBottom: 8,
  },
  selectedRecipient: {
    backgroundColor: '#228B22',
    borderColor: '#228B22',
  },
  recipientText: {
    fontSize: 14,
    color: '#2D5016',
    fontWeight: '500',
  },
  selectedRecipientText: {
    color: '#FFFFFF',
    fontWeight: 'bold',
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
  chatTypeSelector: {
    marginBottom: 16,
  },
  chatTypeButton: {
    backgroundColor: '#F9FFF9',
    borderWidth: 1,
    borderColor: '#E8F5E8',
    borderRadius: 12,
    paddingHorizontal: 12,
    paddingVertical: 8,
    marginRight: 8,
    alignItems: 'center',
    minWidth: 80,
  },
  selectedChatType: {
    backgroundColor: '#228B22',
    borderColor: '#228B22',
  },
  chatTypeIcon: {
    fontSize: 20,
    marginBottom: 4,
  },
  chatTypeText: {
    fontSize: 12,
    color: '#2D5016',
    textAlign: 'center',
  },
  selectedChatTypeText: {
    color: '#FFFFFF',
    fontWeight: 'bold',
  },
  membersGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 16,
  },
  memberButton: {
    backgroundColor: '#F9FFF9',
    borderWidth: 1,
    borderColor: '#E8F5E8',
    borderRadius: 20,
    paddingHorizontal: 12,
    paddingVertical: 6,
    margin: 4,
  },
  selectedMember: {
    backgroundColor: '#E8F5E8',
    borderColor: '#228B22',
  },
  memberText: {
    fontSize: 14,
    color: '#2D5016',
  },
  selectedMemberText: {
    color: '#228B22',
    fontWeight: 'bold',
  },
});
